package com.jeremw.hexagonal.ports.output;

import com.jeremw.hexagonal.domain.Book;

import java.util.List;
import java.util.Optional;

/**
 * This interface defines the contract for a repository that handles book data.
 * It provides methods for accessing and manipulating book in a persistence store.
 *
 * @author Jérémy Woirhaye
 * @version 1.0
 * @since 26/10/2024
 */
public interface BookRepository {

    /**
     * Retrieves all books from the repository.
     *
     * @return a list of all books.
     */
    List<Book> findAll();

    /**
     * Retrieves a book by its unique identifier.
     *
     * @param id the unique identifier of the book.
     * @return an Optional containing the found book, or empty if no book is found with the given ID.
     */
    Optional<Book> findById(Long id);

    /**
     * Retrieves a book by its title.
     *
     * @param title the title of the book to search for.
     * @return an Optional containing the found book, or empty if no book is found with the given title.
     */
    Optional<Book> findByTitle(String title);

    /**
     * Saves a book to the repository.
     *
     * @param book the book to save.
     * @return the saved book entity, which may contain an updated ID if generated by the repository.
     */
    Book save(Book book);

    /**
     * Deletes a book from the repository.
     *
     * @param book the book to delete.
     */
    void delete(Book book);
}
